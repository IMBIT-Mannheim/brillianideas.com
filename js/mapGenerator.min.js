// JavaScript Document Ã¤

/* *********************************************************************** */
/*   Programmierung: Andreas Wulf - https://www.mediafant.de                */
/*   News/Updates unter: https://sources.mediafant.de/mapGenerator/         */
/*   Kontakt: info@mediafant.de                                            */
/* *********************************************************************** */

(function (a) {
  var e = a("body"),
    b;
  a.fn.mapGeneratorForm = function (d) {
    if (l[d]) return l[d].apply(this, Array.prototype.slice.call(arguments, 1));
    if ("object" === typeof d || !d) return l.init.apply(this, arguments);
    a.error("Method " + d + " does not exist");
  };
  var c = {},
    l = {
      initForm: function () {
        c.icons.init();
        c.help.init();
        c.requiredField.init();
        c.sectionToggle.init();
        c.forms.init();
        c.observer.init();
      },
    };
  c.observer = {};
  c.observer.init = function () {
    e.on("data.renew", function () {
      c.forms.fill();
      var a = e.mapGeneratorModel("getMarkerVal", 0);
      c.forms.fillMarker(a, 0);
      c.forms.refreshMarkerListButtons();
      c.sectionToggle.basics();
    });
  };
  c.calculate = {};
  c.calculate.coordinate = function (a) {
    function b(a, d, p, c) {
      d = parseInt(d) + parseInt(p) / 60 + parseFloat(c) / 3600;
      return "S" === a || "W" == a ? -1 * d : d;
    }

    function e(a, d, p) {
      d = parseInt(d) + parseFloat(p) / 60;
      return "S" === a || "W" == a ? -1 * d : d;
    }

    var c = {};
    c.escInput = a;
    c.unescInput = unescape(a);
    a = a.replace(/%20/g, "");
    a = a.replace(/%27%27/g, "%22");
    a = a.replace(/%u2032/g, "%22");
    a = a.replace(/%2C/g, ".");
    a = a.replace(/O/g, "E");
    a = a.replace(/o/g, "E");
    a = a.replace(/n/g, "N");
    a = a.replace(/s/g, "S");
    a = a.replace(/e/g, "E");
    a = a.replace(/w/g, "W");
    a = a.replace(/%B0/g, "d");
    a = a.replace(/%27/g, "m");
    a = a.replace(/%22/g, "s");
    v = unescape(a);
    c.replaced = v;
    var j = /^([N,E,S,W])(\d+)d{1}(\d+)m{1}(\d+\.*\d*)/,
      k = /^(\d+)d{1}(\d+)m{1}(\d+\.*\d*)s{1}([N,E,W,S]?)/,
      m = /^(\d+)d{1}(\d+\.*\d*)([N,S,E,W,\s])/,
      l = /^([N,S,E,W,\s])(\d+)d{1}(\d+\.*\d*)/,
      n = /^(\d+)d{1}(\d+)m{1}(\d+\.*\d*)/,
      p = /^(\d+)d{1}(\d+\.*\d*)/,
      r = /^(\-*\d+\.*\d*)/;
    !0 === j.test(a)
      ? ((a = j.exec(a)),
        (c.status = !0),
        (c.typ = 1),
        (c.value = b(a[1], a[2], a[3], a[4])))
      : !0 === k.test(a)
      ? ((a = k.exec(a)),
        (c.status = !0),
        (c.typ = 2),
        (c.value = b(a[4], a[1], a[2], a[3])))
      : !0 === m.test(a)
      ? ((a = m.exec(a)),
        (c.status = !0),
        (c.typ = 3),
        (c.value = e(a[3], a[1], a[2])))
      : !0 === l.test(a)
      ? ((a = l.exec(a)),
        (c.status = !0),
        (c.typ = 4),
        (c.value = e(a[1], a[2], a[3])))
      : !0 === n.test(a)
      ? ((a = n.exec(a)),
        (c.status = !0),
        (c.typ = 5),
        (c.value = b("N", a[1], a[2], a[3])))
      : !0 === p.test(a)
      ? ((a = p.exec(a)),
        (c.status = !0),
        (c.typ = 6),
        (c.value = e("N", a[1], a[2])))
      : !0 === r.test(a)
      ? ((a = r.exec(a)), (c.status = !0), (c.typ = 7), (c.value = a[1]))
      : ((c.status = !1), (c.typ = 0), (c.value = null));
    return c;
  };
  c.icons = {};
  c.icons.init = function () {
    c.icons.iconChooserToogleButton();
    c.icons.createIcons();
  };
  c.icons.changeIcon = function (d) {
    var c = 0;
    0 < parseInt(d) && (c = parseInt(d));
    a("#markerIconImage").attr({
      src: e.mapGeneratorModel("getIcon", c)[0],
      "data-id": c,
    });
    e.mapGeneratorModel(
      "setMarkerVal",
      parseInt(a("#markerId").val()),
      "markerIconImage",
      c
    );
  };
  c.icons.iconChooserToogleButton = function () {
    a("#button_IconChoose").bind("click", function () {
      c.icons.changeIconChooserButtonStatus();
      return !1;
    });
  };
  c.icons.changeIconChooserButtonStatus = function () {
    !0 == a("#iconChooser").hasClass("hide")
      ? a("#iconChooser").removeClass("hide")
      : a("#iconChooser").addClass("hide");
  };
  c.icons.createIcons = function () {
    var d = e.mapGeneratorModel("getIcons"),
      b = 0,
      f = 0,
      g = "",
      j = "";
    a.each(d, function (d, c) {
      b += 1;
      f += 1;
      j = g = "";
      8 === b
        ? ((g = "<br />"), (f = b = 0))
        : 4 === f && ((j = " &nbsp; &nbsp; "), (f = 0));
      a("#iconChooser").append(
        '<img src="' +
          c[0] +
          '" alt="Icon' +
          d +
          '" data-iconid="' +
          d +
          '" />' +
          g +
          j
      );
    });
    a("#iconChooser")
      .find("img")
      .bind("click", function () {
        c.icons.changeIcon(parseInt(a(this).data("iconid")));
        c.icons.changeIconChooserButtonStatus();
      });
  };
  c.help = {};
  c.help.init = function () {
    0 === a("#infobox").length &&
      e.append('<div id="infobox"></div>').find("#infobox").hide();
    a(".help > img").hover(
      function () {
        c.help.show(this);
      },
      function () {
        a("#infobox").hide();
      }
    );
  };
  c.help.show = function (d) {
    var c = a(window).scrollTop(),
      b = a(d).position(),
      e = a(window).height(),
      j = a(window).width(),
      k;
    k = b.top > e / 2 ? b.top - 70 : b.top + 10;
    b = b.left > j / 2 ? b.left - 235 : b.left + 35;
    a("#infobox")
      .empty()
      .append(a(d).data("text"))
      .css({ left: b + "px", top: k + "px", bottom: "auto" })
      .show();
    k + a("#infobox").height() > e + c &&
      a("#infobox").css({ bottom: -1 * c, top: "auto" });
  };
  c.requiredField = {};
  c.requiredField.init = function () {
    0 === a("#infobox").length &&
      e.append('<div id="infobox"></div>').find("#infobox").hide();
    a(".requiredField").hover(
      function () {
        c.requiredField.show(this);
      },
      function () {
        a("#infobox").hide();
      }
    );
  };
  c.requiredField.show = function (d) {
    var c = a(window).scrollTop(),
      b = a(d).position();
    d = a(window).height();
    var g = a(window).width(),
      j;
    j = b.top > d / 2 ? b.top - 30 : b.top + 10;
    b = b.left > g / 2 ? b.left - 235 : b.left + 35;
    a("#infobox")
      .empty()
      .append(e.mapGeneratorModel("getVal", "requiredField"))
      .css({
        left: b + "px",
        top: j + "px",
        bottom: "auto",
      })
      .show();
    j + a("#infobox").height() > d + c &&
      a("#infobox").css({ bottom: -1 * c, top: "auto" });
  };
  c.sectionToggle = {};
  c.sectionToggle.getIcons = function () {
    return {
      iconHide: webPath + "be/img/minus2.png",
      iconShow: webPath + "be/img/plus2.png",
    };
  };
  c.sectionToggle.init = function () {
    var d = c.sectionToggle.getIcons();
    a(".sectionToggle").hide().eq(0).show();
    a(".toggleIcon").eq(0).attr("src", d.iconHide);
    b = !0;
    e.trigger("view.mode.basic");
    a(".sectionToggleButton").bind("click", function () {
      !0 === b ? c.sectionToggle.markers() : c.sectionToggle.basics();
    });
  };
  c.sectionToggle.basics = function () {
    var d = c.sectionToggle.getIcons();
    a("#sectionBasics").show();
    a("#sectionMarkers").hide();
    a(".sectionToggleBasics .toggleIcon").attr("src", d.iconHide);
    a(".sectionToggleMarker .toggleIcon").attr("src", d.iconShow);
    b = !0;
    e.trigger("view.mode.basic");
  };
  c.sectionToggle.markers = function () {
    var d = c.sectionToggle.getIcons();
    a("#sectionBasics").hide();
    a("#sectionMarkers").show();
    a(".sectionToggleBasics .toggleIcon").attr("src", d.iconShow);
    a(".sectionToggleMarker .toggleIcon").attr("src", d.iconHide);
    b = !1;
    e.trigger("view.mode.marker");
    e.trigger("view.marker", a("#markerId").val());
  };
  c.forms = {};
  c.forms.init = function () {
    c.forms.langSwitcher();
    c.forms.getProjectData();
    c.forms.fill();
    c.forms.basicEvents();
    c.forms.initMarkers();
    c.forms.initDownloadMap();
  };
  c.forms.langSwitcher = function () {
    var d = !1;
    a("#langSwitcher")
      .click(function () {
        !1 === d && (alert(a(this).data("warning")), (d = !0));
      })
      .change(function () {
        a(location).attr("href", "?lang=" + a(this).val());
      });
  };
  c.forms.getProjectData = function () {
    a("#loadProject").bind("click", function () {
      a(this).parent().next().toggle();
    });
    c.forms.getLocalData();
    c.forms.getDataFromUrl();
  };
  c.forms.selectDataVersion = function (a) {
    return "" !== a && "undefined" !== typeof jsonV1
      ? { version: 1, data: jsonV1 }
      : {
          version: parseFloat(a.version),
          data: json,
        };
  };
  c.forms.transformData = function (d) {
    if (1 === d.version) {
      var b = d.data;
      b.panzoombar =
        "on" == b.panzoombar || !0 == b.panzoombar || 1 == b.panzoombar ? 1 : 0;
      b.permalink =
        "on" == b.permalink || !0 == b.permalink || 1 == b.permalink ? 1 : 0;
      b.scaleline =
        "on" == b.scaleline || !0 == b.scaleline || 1 == b.scaleline ? 1 : 0;
      b.showDescriptionOnLoad =
        "on" == b.showDescriptionOnLoad ||
        !0 == b.showDescriptionOnLoad ||
        1 == b.showDescriptionOnLoad
          ? 1
          : 0;
      b = d.data;
      if ("undefined" === typeof b.marker) {
        var c = {
          name: b.markerName,
          name_link: b.markerNameLink,
          lon: b.markerLon,
          lat: b.markerLat,
          content: b.markerContent,
          content_linktitle_1: b.markerContentLinktitle_1,
          content_link_1: b.markerContentLink_1,
          content_linktitle_2: b.markerContentLinktitle_2,
          content_link_2: b.markerContentLink_2,
          content_linktitle_3: b.markerContentLinktitle_3,
          content_link_3: b.markerContentLink_3,
          audiolink: b.markerAudiolink,
          audiolink_m3u: b.markerAudiolink_m3u,
          icon: b.markerIcon,
          showPopupOnLoad: b.markerShowPopupOnLoad,
        };
        b.marker = [];
        b.marker[0] = c;
      }
      var g = d.data;
      "undefined" !== typeof g.marker &&
        0 < g.marker.length &&
        a.each(g.marker, function (a, b) {
          var d = {};
          b.showPopupOnLoad =
            "on" == b.showPopupOnLoad ||
            !0 == b.showPopupOnLoad ||
            1 == b.showPopupOnLoad
              ? 1
              : 0;
          d.markerName = b.name;
          d.markerNameLink = b.name_link;
          d.markerLon = "" !== b.lon ? parseFloat(b.lon) : 0;
          d.markerLat = "" !== b.lat ? parseFloat(b.lat) : 0;
          d.markerIconImage = parseInt(b.icon);
          d.markerContent = b.content;
          d.markerContentLinkTitle_1 = b.content_linktitle_1;
          d.markerContentLinkTitle_2 = b.content_linktitle_2;
          d.markerContentLinkTitle_3 = b.content_linktitle_3;
          d.markerContentLinkLink_1 = b.content_link_1;
          d.markerContentLinkLink_2 = b.content_link_2;
          d.markerContentLinkLink_3 = b.content_link_3;
          d.markerAudiolink_mp3 = b.audiolink;
          d.markerAudiolink_m3u = b.audiolink_m3u;
          d.markerShowPopupOnLoad = b.showPopupOnLoad;
          g.marker[a] = d;
        });
      b = d.data;
      b = {
        version: 3,
        locale: e.mapGeneratorModel("getVal", "locale"),
        units: e.mapGeneratorModel("getVal", "units"),
        flashPath: e.mapGeneratorModel("getVal", "flashPath"),
        iconPath: e.mapGeneratorModel("getVal", "iconPath"),
        geoPath: e.mapGeneratorModel("getVal", "geoPath"),
        title: b.title,
        descriptionStartStatus: e.mapGeneratorModel(
          "getVal",
          "descriptionStartStatus"
        ),
        descriptionText: b.description,
        descriptionButtonShowText: e.mapGeneratorModel(
          "getVal",
          "descriptionButtonShowText"
        ),
        descriptionButtonHideText: e.mapGeneratorModel(
          "getVal",
          "descriptionButtonHideText"
        ),
        audioPlayImage: e.mapGeneratorModel("getVal", "audioPlayImage"),
        audioStopImage: e.mapGeneratorModel("getVal", "audioStopImage"),
        audioDownloadImage: e.mapGeneratorModel("getVal", "audioDownloadImage"),
        geoDownloadImage: e.mapGeneratorModel("getVal", "geoDownloadImage"),
        lon: parseFloat(b.lon),
        lat: parseFloat(b.lat),
        zoom: parseInt(b.zoom),
        panzoombar: b.panzoombar,
        permalinkchk: b.permalink,
        scaleline: b.scaleline,
        showPopupOnHover: e.mapGeneratorModel("getVal", "showPopupOnHover"),
        requiredField: e.mapGeneratorModel("getVal", "requiredField"),
        markers: b.marker,
      };
      d.v3 = b;
      d = d.v3;
    } else d = d.data;
    return d;
  };
  c.forms.getLocalData = function () {
    function b(a) {
      switch (a.target.error.code) {
        case a.target.error.NOT_FOUND_ERR:
          alert("File Not Found!");
          break;
        case a.target.error.NOT_READABLE_ERR:
          alert("File is not readable");
          break;
        case a.target.error.ABORT_ERR:
          break;
        default:
          alert("An error occurred reading this file.");
      }
    }

    var h = a(location).attr("pathname"),
      f;
    document.querySelector(".percent");
    a("#localFile").bind("change", function (g) {
      var j = this;
      f = new FileReader();
      f.onerror = b;
      f.onloadend = function (b) {
        a.ajax({
          type: "POST",
          url: h + "be/ajax/getLocalProject.php",
          data: { data: b.target.result },
          dataType: "script",
        })
          .done(function (b) {
            b = c.forms.selectDataVersion(b);
            b = c.forms.transformData(b);
            "undefined" !== typeof b
              ? e.mapGeneratorModel("setNewData", b)
              : alert(a(j).data("nodata"));
            a(".loadProject .box").hide();
          })
          .error(function () {
            alert(a(j).data("data-datanotcorrect"));
          });
      };
      f.readAsText(g.target.files[0], "UTF-8");
    });
  };
  c.forms.getDataFromUrl = function () {
    var b = a(location).attr("pathname");
    a("#getUrlJsonData").click(function () {
      var c = this;
      a.ajax({
        url: b + "be/ajax/getJsonProject.php?tar=" + a("#urlJsonData").val(),
        dataType: "script",
      })
        .error(function () {
          alert(a(c).data("incorrect-url"));
        })
        .done(function (b) {
          "" !== b && null !== typeof json
            ? e.mapGeneratorModel("setNewData", json)
            : alert(a(c).data("nodata"));
          a(".loadProject .box").hide();
        });
    });
  };
  c.forms.initDownloadMap = function () {
    a("#downloadMap").bind("click", function () {
      var b = a(location).attr("pathname"),
        c = e.mapGeneratorModel("getAll");
      a.post(
        b + "be/ajax/saveProjectData.php",
        { json: JSON.stringify(c) },
        function (a) {
          "ERROR" !== a && (window.location.href = a);
        }
      );
      return !1;
    });
  };
  c.forms.fill = function () {
    a("#title").val(unescape(e.mapGeneratorModel("getVal", "title")));
    a("#descriptionText").text(
      unescape(e.mapGeneratorModel("getVal", "descriptionText"))
    );
    var b = e.mapGeneratorModel("getVal", "descriptionStartStatus");
    a("#descriptionStartStatus").attr("checked", 1 === b ? !0 : !1);
    a("#lon").val(e.mapGeneratorModel("getVal", "lon"));
    a("#lat").val(e.mapGeneratorModel("getVal", "lat"));
    a("#zoom").val(e.mapGeneratorModel("getVal", "zoom"));
    b = e.mapGeneratorModel("getVal", "panzoombar");
    a("#panzoombar").attr("checked", 1 === b || !0 === b ? !0 : !1);
    b = e.mapGeneratorModel("getVal", "permalinkchk");
    a("#permalinkchk").attr("checked", 1 === b || !0 === b ? !0 : !1);
    b = e.mapGeneratorModel("getVal", "scaleline");
    a("#scaleline").attr("checked", 1 === b || !0 === b ? !0 : !1);
    a("#linkMasterPath").val(e.mapGeneratorModel("getVal", "linkMasterPath"));
  };
  c.forms.basicEvents = function () {
    a("input.prefillEmpty.observe").bind("focus", function () {
      a(this).val() == a(this).attr("data-prefill")
        ? a(this).val("")
        : a(this).css({ background: "#ccc" });
    });
    a("textarea.prefillEmpty.observe").bind("focus", function () {
      a(this).text() == a(this).attr("data-prefill") && a(this).text("");
    });
    a(".chkName").bind("blur", function () {
      (!1 == a(this).hasClass("optional") && 3 > a(this).val().length) ||
      (!0 == a(this).hasClass("optional") &&
        0 < a(this).val().length &&
        3 > a(this).val().length)
        ? (alert(a(this).attr("data-chkError")),
          a(this).css({ background: "#f00" }))
        : a(this).css({ background: "#fff" });
    });
    a(".chkNumber").bind("blur", function () {
      0 < a(this).val().length && 0 <= parseInt(a(this).val())
        ? a(this).css({ background: "#fff" })
        : (alert(a(this).attr("data-chkError")),
          a(this).css({ background: "#f00" }));
    });
    a(".chkCoordinate").bind("blur", function () {
      !1 === c.calculate.coordinate(escape(a(this).val())).status
        ? (alert(a(this).attr("data-chkError")),
          a(this).css({ background: "#f00" }))
        : a(this).css({ background: "#fff" });
    });
    a(".chkMasterPath").bind("blur", function () {
      !0 == a(this).hasClass("optional") && 0 == a(this).val().length
        ? a(this).css({ background: "#fff" })
        : 12 < a(this).val().length &&
          ("https://" == a(this).val().toLowerCase().substr(0, 7) ||
            "https://" == a(this).val().toLowerCase().substr(0, 8))
        ? a(this).css({ background: "#fff" })
        : (alert(a(this).attr("data-chkError")),
          a(this).css({ background: "#f00" }));
    });
    a(".chkLink").bind("blur", function () {
      !0 == a(this).hasClass("optional") && 0 == a(this).val().length
        ? a(this).css({ background: "#fff" })
        : "http" === a(this).val().toLowerCase().substr(0, 4) ||
          3 < a(this).val().length
        ? a(this).css({ background: "#fff" })
        : (alert(a(this).attr("data-chkError")),
          a(this).css({ background: "#f00" }));
    });
    a(".observeInputCoordinate").bind("change", function () {
      var b = c.calculate.coordinate(escape(a(this).val()));
      e.mapGeneratorModel("setVal", a(this).attr("id"), b.value);
      a(this).val(b.value);
    });
    a(".observeInputText").bind("change", function () {
      var b;
      b =
        !0 === a(this).hasClass("chkName")
          ? escape(a(this).val())
          : a(this).val();
      e.mapGeneratorModel("setVal", a(this).attr("id"), b);
    });
    a(".observeCheckbox").bind("change", function () {
      e.mapGeneratorModel("setVal", a(this).attr("id"), a(this).is(":checked"));
    });
    a(".observeInputMasterPath").bind("change", function () {
      var b = a(this).val();
      0 < b.length && "/" !== b.substr(-1) && (b = a(this).val() + "/");
      a(this).val(b);
      e.mapGeneratorModel("setVal", a(this).attr("id"), b);
    });
    a("#getDataFromMap").bind("click", function () {
      var b = e.mapGeneratorMap("getMapData");
      a("#lat").val(b.lat);
      a("#lon").val(b.lon);
      a("#zoom").val(b.zoom);
      e.mapGeneratorModel("setVal", "lat", b.lat);
      e.mapGeneratorModel("setVal", "lon", b.lon);
      e.mapGeneratorModel("setVal", "zoom", b.zoom);
      return !1;
    });
  };
  c.forms.initMarkers = function () {
    var a = e.mapGeneratorModel("getVal", "markers");
    c.forms.renewMarkerdata(a, 0);
    markerData = c.forms.getSingleMarkerdata(0);
    c.forms.fillMarker(markerData, 0);
    c.forms.initMarkerEvents();
    c.forms.markerListInit();
    c.forms.refreshMarkerListButtons();
  };
  c.forms.renewMarkerdata = function (b, c) {
    0 === b.length
      ? e.mapGeneratorModel("setFirstMarkerStatus", !0)
      : e.mapGeneratorModel("setFirstMarkerStatus", !1);
    if (0 === b.length || !b[c]) {
      var f = e.mapGeneratorMap("getMapData"),
        f = {
          markerName: a("#markerName").attr("data-prefill"),
          markerLon: f.lon,
          markerLat: f.lat,
          markerIconImage: 0,
          markerContent: a("#markerContent").attr("data-prefill"),
        };
      e.mapGeneratorModel("setNewMarker", c, f);
    }
  };
  c.forms.getSingleMarkerdata = function (a) {
    return e.mapGeneratorModel("getVal", "markers")[a];
  };
  c.forms.fillMarker = function (b, c) {
    a("#markerId").val(c);
    a("#markerName").val(unescape(b.markerName));
    a("#markerNameLink").val(b.markerNameLink);
    a("#markerLon").val(b.markerLon);
    a("#markerLat").val(b.markerLat);
    !0 === b.markerShowPopupOnLoad || 1 === b.markerShowPopupOnLoad
      ? a("#markerShowPopupOnLoad").attr("checked", !0)
      : a("#markerShowPopupOnLoad").attr("checked", !1);
    a("#markerIconImage").attr({
      src: e.mapGeneratorModel("getIcon", b.markerIconImage)[0],
      "data-id": b.markerIconImage,
    });
    void 0 === b.markerContent
      ? a("#markerContent").val("")
      : a("#markerContent").val(unescape(b.markerContent));
    void 0 === b.markerContentLinkTitle_1
      ? a("#markerContentLinkTitle_1").val("")
      : a("#markerContentLinkTitle_1").val(
          unescape(b.markerContentLinkTitle_1)
        );
    a("#markerContentLinkLink_1").val(b.markerContentLinkLink_1);
    void 0 === b.markerContentLinkTitle_2
      ? a("#markerContentLinkTitle_2").val("")
      : a("#markerContentLinkTitle_2").val(
          unescape(b.markerContentLinkTitle_2)
        );
    a("#markerContentLinkLink_2").val(b.markerContentLinkLink_2);
    void 0 === b.markerContentLinkTitle_3
      ? a("#markerContentLinkTitle_3").val("")
      : a("#markerContentLinkTitle_3").val(
          unescape(b.markerContentLinkTitle_3)
        );
    a("#markerContentLinkLink_3").val(b.markerContentLinkLink_3);
    a("#markerAudiolink_mp3").val(b.markerAudiolink_mp3);
    a("#markerAudiolink_m3u").val(b.markerAudiolink_m3u);
  };
  c.forms.initMarkerEvents = function () {
    a("input.prefillEmpty.markerObserve").bind("focus", function () {
      a(this).val() == a(this).attr("data-prefill")
        ? a(this).val("")
        : a(this).css({ background: "#ccc" });
    });
    a("textarea.prefillEmpty.markerObserve").bind("focus", function () {
      a(this).val() == a(this).attr("data-prefill")
        ? a(this).val("")
        : a(this).css({ background: "#ccc" });
    });
    e.on("map.markerChanged", function (b, c) {
      a("#markerLon").val(c.lon);
      a("#markerLat").val(c.lat);
      e.mapGeneratorModel(
        "setMarkerCoordinate",
        parseInt(a("#markerId").val()),
        c.lon,
        c.lat
      );
    });
    a(".markerObserveInputText").live("change", function () {
      var b;
      !0 === a(this).hasClass("chkName")
        ? (b = escape(a(this).val()))
        : !0 === a(this).hasClass("chkLink")
        ? ((b = a(this).val()),
          "http" !== b.toLowerCase().substr(0, 4) &&
            "/" === b.substr(0, 1) &&
            ((b = b.substr(1)), a(this).val(b)))
        : (b = a(this).val());
      e.mapGeneratorModel(
        "setMarkerVal",
        parseInt(a("#markerId").val()),
        a(this).attr("id"),
        b
      );
      c.forms.refreshMarkerListButtons();
    });
    a(".markerObserveInputCoordinate").live("change", function () {
      var b = c.calculate.coordinate(escape(a(this).val()));
      e.mapGeneratorModel(
        "setMarkerVal",
        parseInt(a("#markerId").val()),
        a(this).attr("id"),
        b.value
      );
      a(this).val(b.value);
    });
    a(".markerObserveCheckbox").live("change", function () {
      e.mapGeneratorModel(
        "setMarkerVal",
        parseInt(a("#markerId").val()),
        a(this).attr("id"),
        a(this).is(":checked")
      );
    });
    a("#newMarker").bind("click", function () {
      var b = e.mapGeneratorModel("getVal", "markers"),
        h = b.length;
      c.forms.renewMarkerdata(b, h);
      markerData = c.forms.getSingleMarkerdata(h);
      c.forms.fillMarker(markerData, h);
      e.trigger("view.marker", parseInt(a("#markerId").val()));
      c.forms.refreshMarkerListButtons();
      return !1;
    });
    a("#removeMarker").bind("click", function () {
      var b = parseInt(a("#markerId").val());
      e.mapGeneratorModel("removeMarker", b);
      var h = e.mapGeneratorModel("getVal", "markers"),
        f = 0;
      h.length > b ? (f = b) : 0 < b && (f = b - 1);
      c.forms.fillMarker(h[f], f);
      e.trigger("view.marker", f);
      c.forms.refreshMarkerListButtons();
      return !1;
    });
  };
  c.forms.markerListInit = function () {
    a("#markerListSelect").live("change", function () {
      var b = e.mapGeneratorModel("getVal", "markers"),
        h = parseInt(a(this).val());
      c.forms.fillMarker(b[h], h);
      e.trigger("view.marker", h);
    });
  };
  c.forms.refreshMarkerListButtons = function () {
    var b = e.mapGeneratorModel("getVal", "markers");
    if (0 < b.length) {
      a("#markerListSelect").show().empty();
      a.each(b, function (b, c) {
        a("#markerListSelect").append(
          '<option value="' + b + '">' + unescape(c.markerName) + "</option>"
        );
      });
      var c = parseInt(a("#markerId").val());
      a("#markerListSelect").find("option").eq(c).attr("selected", "selected");
    }
    1 < b.length
      ? (a("#removeMarker").show(), a("#removeMarkerHelp").show())
      : (a("#removeMarker").hide(), a("#removeMarkerHelp").hide());
  };
})(window.jQuery);
(function (a) {
  var e = a("body"),
    b = {},
    c,
    l,
    d,
    h = !1,
    f = null,
    g = null,
    j = null,
    k = null,
    m = [],
    q = [];
  b.doc = {};
  b.doc.title = function () {
    a(document)
      .find("title")
      .text(unescape(e.mapGeneratorModel("getVal", "title")));
  };
  b.map = {};
  b.map.jumpTo = function () {
    var a = parseFloat(e.mapGeneratorModel("getVal", "lon")),
      b = parseFloat(e.mapGeneratorModel("getVal", "lat")),
      c = parseInt(e.mapGeneratorModel("getVal", "zoom")),
      a = new OpenLayers.LonLat(a, b).transform(
        d.displayProjection,
        d.projection
      );
    d.setCenter(a, c);
    return !1;
  };
  b.map.doLink = function (a) {
    return "https://" === a.toLowerCase().substr(0, 7) ||
      "https://" === a.toLowerCase().substr(0, 8)
      ? a
      : e.mapGeneratorModel("getVal", "linkMasterPath") + a;
  };
  b.map.initMap = function () {
    d = new OpenLayers.Map("map", {
      projection: new OpenLayers.Projection("EPSG:900913"),
      displayProjection: new OpenLayers.Projection("EPSG:4326"),
      controls: [
        new OpenLayers.Control.Navigation(),
        new OpenLayers.Control.Attribution(),
      ],
      maxExtent: new OpenLayers.Bounds(),
      numZoomLevels: 18,
      units: e.mapGeneratorModel("getVal", "units"),
    });
    d.addLayer(new OpenLayers.Layer.OSM.Mapnik("Mapnik"));
  };
  b.map.refreshControls = function () {
    var a = e.mapGeneratorModel("getVal", "panzoombar");
    if ((!0 === a || 1 === a) && null === f)
      (f = new OpenLayers.Control.PanZoomBar()), d.addControl(f);
    else if ((void 0 === a || !1 === a) && null !== f)
      d.removeControl(f), (f = null);
    a = e.mapGeneratorModel("getVal", "permalinkchk");
    if ((!0 === a || 1 === a) && null === g)
      (g = new OpenLayers.Control.Permalink("permalink")), d.addControl(g);
    else if ((void 0 === a || !1 === a) && null !== g)
      d.removeControl(g), (g = null);
    a = e.mapGeneratorModel("getVal", "scaleline");
    if ((!0 === a || 1 === a) && null === j)
      (j = new OpenLayers.Control.ScaleLine()), d.addControl(j);
    else if ((void 0 === a || void 0 === a) && null !== j)
      d.removeControl(j), (j = null);
  };
  b.map.setMarkerMode = function () {
    null === f && ((f = new OpenLayers.Control.PanZoomBar()), d.addControl(f));
    null != l && l.activate();
  };
  b.map.markerClickInit = function () {
    OpenLayers.Control.Click = OpenLayers.Class(OpenLayers.Control, {
      defaultHandlerOptions: {
        single: !0,
        double: !1,
        pixelTolerance: 50,
        stopSingle: !1,
        stopDouble: !1,
      },
      initialize: function (a) {
        this.handlerOptions = OpenLayers.Util.extend(
          {},
          this.defaultHandlerOptions
        );
        OpenLayers.Control.prototype.initialize.apply(this, arguments);
        this.handler = new OpenLayers.Handler.Click(
          this,
          { click: this.trigger },
          this.handlerOptions
        );
      },
      trigger: function (a) {
        a = d
          .getLonLatFromViewPortPx(a.xy)
          .transform(
            new OpenLayers.Projection("EPSG:900913"),
            new OpenLayers.Projection("EPSG:4326")
          );
        e.trigger("map.markerChanged", a);
      },
    });
    l = new OpenLayers.Control.Click();
    d.addControl(l);
  };
  b.marker = {};
  b.marker.initMarkerLayer = function () {
    k = new OpenLayers.Layer.Markers("Marker", {
      projection: new OpenLayers.Projection("EPSG:4326"),
      visibility: !0,
      displayInLayerSwitcher: !1,
    });
    d.addLayer(k);
  };
  b.marker.initMarkers = function () {
    var c = e.mapGeneratorModel("getVal", "markers");
    a.each(c, function (a, e) {
      b.marker.setNewMarker(a, c);
      b.marker.changeIcon(e, a);
      var f = d.popups[a];
      void 0 != f &&
        b.marker.initPopupOnLoad(f.feature, e.markerShowPopupOnLoad);
    });
  };
  b.marker.setNewMarker = function (a, c) {
    b.marker.addMarker(a, c[a]);
    !0 === e.mapGeneratorModel("getFirstMarkerStatus") &&
      k.markers[0].display(!1);
  };
  b.marker.showAllMarkers = function () {
    a.each(k.markers, function (a, b) {
      b.display(!0);
    });
    var c = e.mapGeneratorModel("getVal", "markers");
    a.each(c, function (a, c) {
      var e = d.popups[a];
      void 0 != e &&
        b.marker.initPopupOnLoad(e.feature, c.markerShowPopupOnLoad);
    });
  };
  b.marker.showSingleMarker = function (b) {
    a.each(k.markers, function (a, c) {
      a == b ? c.display(!0) : c.display(!1);
    });
    a.each(d.popups, function (a, c) {
      a == b ? c.show() : c.hide();
    });
  };
  b.marker.moveMarker = function (a, b) {
    var c = new OpenLayers.LonLat(
        parseFloat(a.markerLon),
        parseFloat(a.markerLat)
      ).transform(d.displayProjection, d.projection),
      e = d.getLayerPxFromViewPortPx(
        d.getPixelFromLonLat(
          new OpenLayers.LonLat(
            parseFloat(a.markerLon),
            parseFloat(a.markerLat)
          ).transform(d.displayProjection, d.projection)
        )
      );
    k.markers[b].moveTo(e);
    m[b].lonlat = c;
    m[b].draw();
  };
  b.marker.changeIcon = function (a, b) {
    var c = k.markers[b].icon,
      d = e.mapGeneratorModel("getIcon", a.markerIconImage);
    c.url !== d[0] &&
      ((c.url = d[0]),
      (c.size.w = parseFloat(d[1])),
      (c.size.h = parseFloat(d[2])),
      (c.offset.x = -1 * parseFloat(d[1]) * parseFloat(d[3])),
      (c.offset.y = -1 * parseFloat(d[2]) * parseFloat(d[4])),
      c.draw());
  };
  b.marker.createIcon = function (a) {
    a = e.mapGeneratorModel("getIcon", a);
    var b = new OpenLayers.Size(parseFloat(a[1]), parseFloat(a[2])),
      c = new OpenLayers.Pixel(
        -(b.w * parseFloat(a[3])),
        -(b.h * parseFloat(a[4]))
      );
    return new OpenLayers.Icon(a[0], b, c);
  };
  b.marker.addMarker = function (a, c) {
    var f = b.popup.createContent(a, c),
      j = e.mapGeneratorModel("getVal", "showPopupOnHover"),
      g = new OpenLayers.Feature(
        k,
        new OpenLayers.LonLat(c.markerLon, c.markerLat).transform(
          d.displayProjection,
          d.projection
        )
      ),
      h = g.createMarker();
    k.addMarker(h);
    q[a] = h;
    m[a] = g.popup;
    g.closeBox = !0;
    g.popupClass = OpenLayers.Class(OpenLayers.Popup.FramedCloud, {
      autoSize: !0,
      minSize: new OpenLayers.Size(200, 150),
      maxSize: new OpenLayers.Size(300, 200),
      keepInMap: !0,
    });
    g.data.popupContentHTML = f;
    g.data.overflow = "auto";
    g.data.icon = b.marker.createIcon(c.markerIconImage);
    g.popup = g.createPopup(g.closeBox);
    g.popup.myId = a;
    d.addPopup(g.popup);
    m[a] = g.popup;
    b.marker.initPopupOnLoad(g, b.marker.initPopupOnLoad);
    h.events.register("touchstart", g, function (a) {
      a.stopPropagation();
      a.preventDefault();
      if (!0 !== a.handled) b.marker.eventMarkerClick(g), (a.handled = !0);
      else return !1;
    });
    h.events.register("mousedown", g, function (a) {
      a.stopPropagation();
      a.preventDefault();
      if (!0 !== a.handled) b.marker.eventMarkerClick(g), (a.handled = !0);
      else return !1;
    });
    j &&
      (h.events.register("mouseover", g, function () {
        b.marker.eventMarkerHover(g);
      }),
      h.events.register("mouseout", g, function () {
        b.marker.eventMarkerOut(g);
      }));
  };
  b.marker.initPopupOnLoad = function (a, b) {
    !0 === b || 1 === b
      ? ((a.popup.clicked = !0), a.popup.show())
      : (a.popup.hide(), (a.popup.clicked = !1));
  };
  b.marker.eventMarkerClick = function (a) {
    !1 == a.popup.visible() && (a.popup.clicked = !1);
    !0 == a.popup.clicked
      ? ((a.popup.clicked = !1), a.popup.hide(), b.audio.audioStop(null))
      : ((a.popup.clicked = !0), !1 == a.popup.visible() && a.popup.show());
  };
  b.marker.eventMarkerHover = function (a) {
    !1 == h &&
      (!1 == a.popup.visible() && (a.popup.clicked = !1),
      !1 == a.popup.clicked && a.popup.show());
  };
  b.marker.eventMarkerOut = function (a) {
    !1 == h &&
      !1 == a.popup.clicked &&
      (a.popup.hide(),
      "a" + a.popup.myId === b.audio.lastAudioId &&
        b.audio.audioStop("a" + a.popup.myId));
  };
  b.popup = {};
  b.popup.createContent = function (a, c) {
    var d;
    getText = function () {
      var a = "";
      void 0 !== c.markerContent && (a = unescape(c.markerContent));
      return a;
    };
    getLinks = function () {
      for (var a = "", e = 1; 3 >= e; e++)
        if (
          "undefined" !== typeof c["markerContentLinkLink_" + e] &&
          "undefined" !== typeof c["markerContentLinkTitle_" + e] &&
          0 < c["markerContentLinkLink_" + e].length &&
          0 < c["markerContentLinkTitle_" + e].length
        )
          var d = b.map.doLink(c["markerContentLinkLink_" + e]),
            a =
              a +
              ('<a href="' +
                d +
                '" target="_blank">' +
                unescape(c["markerContentLinkTitle_" + e]) +
                "</a><br />");
        else
          "undefined" !== typeof c["markerContentLinkTitle_" + e] &&
            0 < c["markerContentLinkTitle_" + e].length &&
            (a += unescape(c["markerContentLinkTitle_" + e]) + "<br />");
      return a;
    };
    d = '<div class="icons">';
    var f = "",
      g = "",
      j = "",
      h = e.mapGeneratorModel("getVal", "audioPlayImage"),
      k = e.mapGeneratorModel("getVal", "audioDownloadImage");
    "undefined" !== typeof c.markerAudiolink_mp3 &&
      0 < c.markerAudiolink_mp3.length &&
      (g = b.map.doLink(c.markerAudiolink_mp3));
    "undefined" !== typeof c.markerAudiolink_m3u &&
      0 < c.markerAudiolink_m3u.length &&
      (j = b.map.doLink(c.markerAudiolink_m3u));
    if (0 < g.length || 0 < j.length)
      f =
        f +
        ("<img id='a" +
          a +
          "'class='audioPlayBut' data-markerAudiolink_mp3='" +
          g +
          "' data-markerAudiolink_m3u='" +
          j +
          "' src='" +
          h +
          "'alt='play' title='Play/Stop Audio' />") +
        ("<a href='" +
          g +
          "' class='mp3Download'><img src='" +
          k +
          "' alt='Download Audio' title='Download Audio' /></a>");
    d += f;
    f = e.mapGeneratorModel("getVal", "geoDownloadImage");
    d =
      d +
      ("<a href='#' id='g" +
        a +
        "'><img src='" +
        f +
        "' class='geoBut' alt='Download Geo-Position' title='Download Geo-Position' /></a>") +
      "</div>";
    f =
      c.markerNameLink && 0 < c.markerNameLink.length
        ? "<strong><a href='" +
          b.map.doLink(c.markerNameLink) +
          "' target='_blank'>" +
          unescape(c.markerName) +
          "</a></strong>"
        : "<strong>" + unescape(c.markerName) + "</strong>";
    d = d + f + "<br />";
    d += getText();
    d += "<br />";
    return (d += getLinks());
  };
  b.popup.registerClose = function () {
    var c = !1;
    a(".olPopupCloseBox").bind("touchstart click", function () {
      if (!c) {
        c = !0;
        setTimeout(function () {
          c = !1;
        }, 100);
        var e = a(this).parent().find(".audioPlayBut").attr("id");
        e === b.audio.lastAudioId && b.audio.audioStop(e);
      }
    });
  };
  b.description = {};
  b.description.init = function () {
    0 === c.find("#description").length &&
      (c.append('<div id="description"></div>'),
      c.append(
        '<div id="descriptionToggle"><span class="textHide">' +
          e.mapGeneratorModel("getVal", "descriptionButtonShowText") +
          '</span><span class="textShow">' +
          e.mapGeneratorModel("getVal", "descriptionButtonHideText") +
          "</span></div>"
      ));
    a("#description").html(
      unescape(e.mapGeneratorModel("getVal", "descriptionText"))
    );
    var b = !1;
    a("#descriptionToggle").bind("touchstart click", function () {
      if (!b) {
        b = !0;
        setTimeout(function () {
          b = !1;
        }, 100);
        var c = a(this);
        !0 === a("#description").hasClass("hide")
          ? (a("#description").removeClass("hide").addClass("show"),
            c.find(".textShow").show().parent().find(".textHide").hide())
          : (a("#description").removeClass("show").addClass("hide"),
            c.find(".textShow").hide().parent().find(".textHide").show());
      }
      return !1;
    });
  };
  b.description.refreshDescription = function () {
    a("#description").html(
      unescape(e.mapGeneratorModel("getVal", "descriptionText"))
    );
    !0 === e.mapGeneratorModel("getVal", "descriptionStartStatus") ||
    1 === e.mapGeneratorModel("getVal", "descriptionStartStatus")
      ? (a("#description").removeClass("show hide").addClass("show"),
        a("#descriptionToggle")
          .find(".textHide")
          .hide()
          .parent()
          .find(".textShow")
          .show())
      : (a("#description").removeClass("show hide").addClass("hide"),
        a("#descriptionToggle")
          .find(".textHide")
          .show()
          .parent()
          .find(".textShow")
          .hide());
  };
  b.geo = {};
  b.geo.refreshGeo = function (c) {
    a.each(c, function (a) {
      b.geo.refreshSingleGeo(a);
    });
  };
  b.geo.refreshSingleGeo = function (c) {
    var e = !1;
    a("#g" + c)
      .unbind("touchstart click")
      .bind("touchstart click", function () {
        e ||
          ((e = !0),
          setTimeout(function () {
            e = !1;
          }, 100),
          b.geo.getGeo(c));
        return !1;
      });
  };
  b.geo.getGeo = function (b) {
    var c = e.mapGeneratorModel("getMarkerVal", b),
      d = {},
      f = e.mapGeneratorModel("getVal", "geoPath"),
      g = e.mapGeneratorModel("getVal", "linkMasterPath");
    "undefined" !== typeof c.markerLon && (d.lon = c.markerLon);
    "undefined" !== typeof c.markerLat && (d.lat = c.markerLat);
    "undefined" !== typeof c.markerName && (d.n = c.markerName);
    "undefined" !== typeof c.markerContent && (d.c = c.markerContent);
    "undefined" !== typeof c.markerContentLinkTitle_1 &&
      (d.t1 = c.markerContentLinkTitle_1);
    "undefined" !== typeof c.markerContentLinkTitle_2 &&
      (d.t2 = c.markerContentLinkTitle_2);
    "undefined" !== typeof c.markerContentLinkTitle_3 &&
      (d.t3 = c.markerContentLinkTitle_3);
    "undefined" !== typeof c.markerContentLinkLink_1 &&
      (d.l1 = c.markerContentLinkLink_1);
    "undefined" !== typeof c.markerContentLinkLink_2 &&
      (d.l2 = c.markerContentLinkLink_2);
    "undefined" !== typeof c.markerContentLinkLink_3 &&
      (d.l3 = c.markerContentLinkLink_3);
    b = a.ajax({
      type: "GET",
      url: f,
      dataType: "jsonp",
      data: { gid: b, mpath: g, json: JSON.stringify(d) },
    });
    b.done(function (a) {
      window.location.href = a.downloadLink;
    });
    b.fail(function (a, b) {
      console.debug("Request failed: " + b);
    });
  };
  b.audio = {};
  b.audio.myPlayer = null;
  b.audio.lastAudioId = null;
  b.audio.initAudio = function () {
    if (0 === c.find("#audioPlayer").length) {
      c.append('<div id="audioPlayer"></div>');
      var d = e.mapGeneratorModel("getVal", "flashPath");
      a("#audioPlayer").flash(
        {
          data: d,
          src: d,
          id: "myPlayer",
          width: 1,
          height: 1,
          allowscriptaccess: "always",
          swliveconnect: "true",
        },
        { version: 9 }
      );
      b.audio.myPlayer = a("#myPlayer")[0];
    }
  };
  b.audio.refreshSingleAudio = function (c) {
    a("#a" + c)
      .unbind("touchstart click")
      .bind("touchstart click", function () {
        b.audio.audioPlay(a(this));
        return !1;
      });
  };
  b.audio.refreshAudios = function (c) {
    a.each(c, function (c) {
      a("#a" + c)
        .unbind("touchstart click")
        .bind("touchstart click", function () {
          b.audio.audioPlay(a(this));
          return !1;
        });
    });
  };
  b.audio.audioPlay = function (c) {
    b.popup.registerClose();
    if (!0 == e.mapGeneratorModel("getFlashStatus")) {
      var d = c.attr("id");
      if (a("#" + d))
        if ("play" === a("#" + d).attr("alt")) {
          if (
            (a("#" + d)
              .attr("src", e.mapGeneratorModel("getVal", "audioStopImage"))
              .attr("alt", "stop"),
            null === b.audio.lastAudioId
              ? (b.audio.lastAudioId = d)
              : b.audio.lastAudioId !== d &&
                (b.audio.audioStop(b.audio.lastAudioId),
                (b.audio.lastAudioId = d)),
            b.audio.myPlayer &&
              "undefined" != typeof b.audio.myPlayer.audioPlay)
          )
            try {
              b.audio.myPlayer.audioPlay(c.attr("data-markerAudiolink_mp3"));
            } catch (f) {
              console.log(
                "map/audioplay - Error - cannot send link to Player (" +
                  c.attr("data-markerAudiolink_mp3") +
                  ") - E: " +
                  f
              );
            }
        } else b.audio.audioStop();
    } else if ("" != Modernizr.audio.mp3)
      try {
        window.open(c.attr("data-markerAudiolink_mp3"), "Audio");
      } catch (g) {
        console.log("map/audioplay/mp3 - Error to create Fallback");
      }
    else if ("" !== c.attr("data-markerAudiolink_m3u"))
      try {
        window.open(c.attr("data-markerAudiolink_m3u"), "Audio");
      } catch (j) {
        console.log("map/audioplay/m3u - Error to create Fallback");
      }
    else alert("Error: no mp3-supported Browser");
  };
  b.audio.audioStop = function (c) {
    if (
      null !== b.audio.myPlayer &&
      "undefined" !== typeof b.audio.myPlayer.audioStop
    )
      try {
        b.audio.myPlayer.audioStop();
      } catch (d) {
        console.log("map/audioStop - Error stop Audio (" + d + ")");
      }
    var f = null;
    null !== c && "undefined" !== typeof c
      ? (f = c)
      : null !== b.audio.lastAudioId && (f = b.audio.lastAudioId);
    null !== f &&
      a("#" + f)
        .attr("src", e.mapGeneratorModel("getVal", "audioPlayImage"))
        .attr("alt", "play");
    b.audio.lastAudioId = null;
  };
  b.main = {};
  b.main.dataRenew = function () {
    d.destroy();
    k.clearMarkers();
    k.redraw();
    a("#audioPlayer").remove();
    a("#description").remove();
    a("#descriptionToggle").remove();
    k = null;
    q = [];
    m = [];
    j = g = f = void 0;
    n.buildMap();
  };
  b.main.viewModeBasic = function () {
    h = !1;
    l.deactivate();
    b.marker.showAllMarkers();
  };
  b.main.viewModeMarker = function () {
    h = !0;
    if (!0 === e.mapGeneratorModel("getFirstMarkerStatus")) {
      var a = e.mapGeneratorModel("getVal", "lon"),
        c = e.mapGeneratorModel("getVal", "lat");
      e.mapGeneratorModel("setMarkerCoordinate", 0, a, c);
      e.mapGeneratorModel("setFirstMarkerStatus", !1);
    }
    b.map.setMarkerMode();
  };
  b.main.viewMarker = function (a) {
    b.marker.showSingleMarker(a);
  };
  b.main.basicChange = function () {
    b.description.refreshDescription();
    b.map.refreshControls();
    b.map.jumpTo();
    b.doc.title();
  };
  b.main.markerChange = function (a) {
    var c = e.mapGeneratorModel("getMarkerVal", a);
    b.marker.moveMarker(c, a);
    b.marker.changeIcon(c, a);
    c = b.popup.createContent(a, c);
    d.popups[a].setContentHTML(c);
    b.audio.refreshSingleAudio(a);
    b.geo.refreshSingleGeo(a);
  };
  b.main.markerRemove = function (c) {
    q = a.grep(q, function (a, b) {
      c == b && (k.removeMarker(q[c]), d.removePopup(d.popups[c]));
      return b != c;
    });
    var f = e.mapGeneratorModel("getVal", "markers");
    b.audio.refreshAudios(f);
    b.geo.refreshGeo(f);
  };
  b.main.markerNew = function (a) {
    var c = e.mapGeneratorModel("getVal", "markers");
    b.marker.setNewMarker(a, c);
    !0 === h && l.activate();
    b.audio.refreshAudios(c);
    b.geo.refreshGeo(c);
  };
  var n = {
    buildMap: function () {
      c = a("#map");
      b.doc.title();
      b.description.init();
      b.description.refreshDescription();
      b.map.initMap();
      b.map.refreshControls();
      b.marker.initMarkerLayer();
      b.map.jumpTo();
      b.audio.initAudio();
      b.map.markerClickInit();
      b.marker.initMarkers();
      var d = e.mapGeneratorModel("getVal", "markers");
      b.audio.refreshAudios(d);
      b.geo.refreshGeo(d);
      e.on("data.renew", function () {
        b.main.dataRenew();
      });
      e.on("view.mode.marker", function () {
        b.main.viewModeMarker();
      });
      e.on("view.marker", function (a, c) {
        b.main.viewMarker(c);
      });
      e.on("view.mode.basic", function () {
        b.main.viewModeBasic();
      });
      e.on("basic.change", function () {
        b.main.basicChange();
      });
      e.on("marker.change", function (a, c) {
        b.main.markerChange(c);
      });
      e.on("marker.new", function (a, c) {
        b.main.markerNew(c);
      });
      e.on("marker.remove", function (a, c) {
        b.main.markerRemove(c);
      });
    },
    setBaseMode: function () {
      b.main.viewModeBasic();
    },
    getMapData: function () {
      var a = d.getCenter(),
        a = OpenLayers.Layer.SphericalMercator.inverseMercator(a.lon, a.lat);
      return { lon: a.lon, lat: a.lat, zoom: d.getZoom() };
    },
  };
  a.fn.mapGeneratorMap = function (b) {
    if (n[b]) return n[b].apply(this, Array.prototype.slice.call(arguments, 1));
    if ("object" === typeof b || !b) return n.init.apply(this, arguments);
    a.error("Method " + b + " does not exist");
  };
})(window.jQuery);
(function (a) {
  var e = a("body"),
    b = {},
    c,
    l = !1,
    d;
  b.getIcons = function () {
    var a = [];
    a[0] = ["../img/marker-medium.png", "21", "25", "0.5", "1"];
    a[1] = [c.iconPath + "drachen_gelb.png", "21", "25", "0.5", "1"];
    a[2] = [c.iconPath + "drachen_blau.png", "21", "25", "0.5", "1"];
    a[3] = [c.iconPath + "drachen_gruen.png", "21", "25", "0.5", "1"];
    a[4] = [c.iconPath + "faehnchen_rot.png", "24", "28", "0", "1"];
    a[5] = [c.iconPath + "faehnchen_gelb.png", "24", "28", "0", "1"];
    a[6] = [c.iconPath + "faehnchen_blau.png", "24", "28", "0", "1"];
    a[7] = [c.iconPath + "faehnchen_gruen.png", "24", "28", "0", "1"];
    a[8] = [c.iconPath + "pin_rot.png", "16", "28", "0", "1"];
    a[9] = [c.iconPath + "pin_gelb.png", "16", "28", "0", "1"];
    a[10] = [c.iconPath + "pin_blau.png", "16", "28", "0", "1"];
    a[11] = [c.iconPath + "pin_gruen.png", "16", "28", "0", "1"];
    return a;
  };
  var h = {
    initVal: function () {
      c = e.getJsonData();
    },
    setNewData: function (a) {
      c = a;
      e.trigger("data.renew");
    },
    getAll: function () {
      return c;
    },
    getVal: function (a) {
      var b,
        d = a.split(".");
      1 < d.length
        ? c[d[0]] && c[d[0]][d[1]] && (b = c[d[0]][d[1]])
        : c[a] && (b = c[a]);
      return b;
    },
    setVal: function (a, b) {
      c[a] = b;
      e.trigger("basic.change");
    },
    setFlashStatus: function (a) {
      l = a;
    },
    getFlashStatus: function () {
      return l;
    },
    getIcons: function () {
      return b.getIcons();
    },
    getIcon: function (a) {
      return b.getIcons()[a];
    },
    getMarkerVal: function (a) {
      return c.markers[a];
    },
    setMarkerVal: function (a, b, d) {
      c.markers[a][b] = d;
      e.trigger("marker.change", a);
    },
    setMarkerCoordinate: function (a, b, d) {
      c.markers[a].markerLon = b;
      c.markers[a].markerLat = d;
      e.trigger("marker.change", a);
    },
    setNewMarker: function (a, b) {
      c.markers[a] = b;
      e.trigger("marker.new", a);
    },
    removeMarker: function (b) {
      c.markers = a.grep(c.markers, function (a, c) {
        return c != b;
      });
      e.trigger("marker.remove", b);
    },
    setFirstMarkerStatus: function (a) {
      d = a;
    },
    getFirstMarkerStatus: function () {
      return d;
    },
  };
  a.fn.mapGeneratorModel = function (b) {
    if (h[b]) return h[b].apply(this, Array.prototype.slice.call(arguments, 1));
    if ("object" === typeof b || !b) return h.init.apply(this, arguments);
    a.error("Method " + b + " does not exist");
  };
})(window.jQuery);
